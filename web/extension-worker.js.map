{"version":3,"file":"extension-worker.js","sources":["webpack://GUI/webpack/bootstrap","webpack://GUI/./node_modules/scratch-vm/src/extension-support/extension-worker.js","webpack://GUI/./node_modules/microee/index.js","webpack://GUI/./node_modules/minilog/lib/common/filter.js","webpack://GUI/./node_modules/minilog/lib/common/minilog.js","webpack://GUI/./node_modules/minilog/lib/common/transform.js","webpack://GUI/./node_modules/minilog/lib/web/array.js","webpack://GUI/./node_modules/minilog/lib/web/console.js","webpack://GUI/./node_modules/minilog/lib/web/formatters/color.js","webpack://GUI/./node_modules/minilog/lib/web/formatters/minilog.js","webpack://GUI/./node_modules/minilog/lib/web/formatters/util.js","webpack://GUI/./node_modules/minilog/lib/web/index.js","webpack://GUI/./node_modules/minilog/lib/web/jquery_simple.js","webpack://GUI/./node_modules/minilog/lib/web/localstorage.js","webpack://GUI/./node_modules/scratch-vm/src/dispatch/shared-dispatch.js","webpack://GUI/./node_modules/scratch-vm/src/dispatch/worker-dispatch.js","webpack://GUI/./node_modules/scratch-vm/src/extension-support/argument-type.js","webpack://GUI/./node_modules/scratch-vm/src/extension-support/block-type.js","webpack://GUI/./node_modules/scratch-vm/src/extension-support/target-type.js","webpack://GUI/./node_modules/scratch-vm/src/util/log.js","webpack://GUI/(webpack)/buildin/global.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/babel-loader/lib/index.js?!./node_modules/scratch-vm/src/extension-support/extension-worker.js\");\n","/* eslint-env worker */\r\n\r\nconst ArgumentType = require('../extension-support/argument-type');\r\nconst BlockType = require('../extension-support/block-type');\r\nconst dispatch = require('../dispatch/worker-dispatch');\r\nconst TargetType = require('../extension-support/target-type');\r\n\r\nclass ExtensionWorker {\r\n    constructor () {\r\n        this.nextExtensionId = 0;\r\n\r\n        this.initialRegistrations = [];\r\n\r\n        dispatch.waitForConnection.then(() => {\r\n            dispatch.call('extensions', 'allocateWorker').then(x => {\r\n                const [id, extension] = x;\r\n                this.workerId = id;\r\n\r\n                try {\r\n                    importScripts(extension);\r\n\r\n                    const initialRegistrations = this.initialRegistrations;\r\n                    this.initialRegistrations = null;\r\n\r\n                    Promise.all(initialRegistrations).then(() => dispatch.call('extensions', 'onWorkerInit', id));\r\n                } catch (e) {\r\n                    dispatch.call('extensions', 'onWorkerInit', id, e);\r\n                }\r\n            });\r\n        });\r\n\r\n        this.extensions = [];\r\n    }\r\n\r\n    register (extensionObject) {\r\n        const extensionId = this.nextExtensionId++;\r\n        this.extensions.push(extensionObject);\r\n        const serviceName = `extension.${this.workerId}.${extensionId}`;\r\n        const promise = dispatch.setService(serviceName, extensionObject)\r\n            .then(() => dispatch.call('extensions', 'registerExtensionService', serviceName));\r\n        if (this.initialRegistrations) {\r\n            this.initialRegistrations.push(promise);\r\n        }\r\n        return promise;\r\n    }\r\n}\r\n\r\nglobal.Scratch = global.Scratch || {};\r\nglobal.Scratch.ArgumentType = ArgumentType;\r\nglobal.Scratch.BlockType = BlockType;\r\nglobal.Scratch.TargetType = TargetType;\r\n\r\n/**\r\n * Expose only specific parts of the worker to extensions.\r\n */\r\nconst extensionWorker = new ExtensionWorker();\r\nglobal.Scratch.extensions = {\r\n    register: extensionWorker.register.bind(extensionWorker)\r\n};\r\n","function M() { this._events = {}; }\nM.prototype = {\n  on: function(ev, cb) {\n    this._events || (this._events = {});\n    var e = this._events;\n    (e[ev] || (e[ev] = [])).push(cb);\n    return this;\n  },\n  removeListener: function(ev, cb) {\n    var e = this._events[ev] || [], i;\n    for(i = e.length-1; i >= 0 && e[i]; i--){\n      if(e[i] === cb || e[i].cb === cb) { e.splice(i, 1); }\n    }\n  },\n  removeAllListeners: function(ev) {\n    if(!ev) { this._events = {}; }\n    else { this._events[ev] && (this._events[ev] = []); }\n  },\n  listeners: function(ev) {\n    return (this._events ? this._events[ev] || [] : []);\n  },\n  emit: function(ev) {\n    this._events || (this._events = {});\n    var args = Array.prototype.slice.call(arguments, 1), i, e = this._events[ev] || [];\n    for(i = e.length-1; i >= 0 && e[i]; i--){\n      e[i].apply(this, args);\n    }\n    return this;\n  },\n  when: function(ev, cb) {\n    return this.once(ev, cb, true);\n  },\n  once: function(ev, cb, when) {\n    if(!cb) return this;\n    function c() {\n      if(!when) this.removeListener(ev, c);\n      if(cb.apply(this, arguments) && when) this.removeListener(ev, c);\n    }\n    c.cb = cb;\n    this.on(ev, c);\n    return this;\n  }\n};\nM.mixin = function(dest) {\n  var o = M.prototype, k;\n  for (k in o) {\n    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);\n  }\n};\nmodule.exports = M;\n","// default filter\nvar Transform = require('./transform.js');\n\nvar levelMap = { debug: 1, info: 2, warn: 3, error: 4 };\n\nfunction Filter() {\n  this.enabled = true;\n  this.defaultResult = true;\n  this.clear();\n}\n\nTransform.mixin(Filter);\n\n// allow all matching, with level >= given level\nFilter.prototype.allow = function(name, level) {\n  this._white.push({ n: name, l: levelMap[level] });\n  return this;\n};\n\n// deny all matching, with level <= given level\nFilter.prototype.deny = function(name, level) {\n  this._black.push({ n: name, l: levelMap[level] });\n  return this;\n};\n\nFilter.prototype.clear = function() {\n  this._white = [];\n  this._black = [];\n  return this;\n};\n\nfunction test(rule, name) {\n  // use .test for RegExps\n  return (rule.n.test ? rule.n.test(name) : rule.n == name);\n};\n\nFilter.prototype.test = function(name, level) {\n  var i, len = Math.max(this._white.length, this._black.length);\n  for(i = 0; i < len; i++) {\n    if(this._white[i] && test(this._white[i], name) && levelMap[level] >= this._white[i].l) {\n      return true;\n    }\n    if(this._black[i] && test(this._black[i], name) && levelMap[level] <= this._black[i].l) {\n      return false;\n    }\n  }\n  return this.defaultResult;\n};\n\nFilter.prototype.write = function(name, level, args) {\n  if(!this.enabled || this.test(name, level)) {\n    return this.emit('item', name, level, args);\n  }\n};\n\nmodule.exports = Filter;\n","var Transform = require('./transform.js'),\n    Filter = require('./filter.js');\n\nvar log = new Transform(),\n    slice = Array.prototype.slice;\n\nexports = module.exports = function create(name) {\n  var o   = function() { log.write(name, undefined, slice.call(arguments)); return o; };\n  o.debug = function() { log.write(name, 'debug', slice.call(arguments)); return o; };\n  o.info  = function() { log.write(name, 'info',  slice.call(arguments)); return o; };\n  o.warn  = function() { log.write(name, 'warn',  slice.call(arguments)); return o; };\n  o.error = function() { log.write(name, 'error', slice.call(arguments)); return o; };\n  o.log   = o.debug; // for interface compliance with Node and browser consoles\n  o.suggest = exports.suggest;\n  o.format = log.format;\n  return o;\n};\n\n// filled in separately\nexports.defaultBackend = exports.defaultFormatter = null;\n\nexports.pipe = function(dest) {\n  return log.pipe(dest);\n};\n\nexports.end = exports.unpipe = exports.disable = function(from) {\n  return log.unpipe(from);\n};\n\nexports.Transform = Transform;\nexports.Filter = Filter;\n// this is the default filter that's applied when .enable() is called normally\n// you can bypass it completely and set up your own pipes\nexports.suggest = new Filter();\n\nexports.enable = function() {\n  if(exports.defaultFormatter) {\n    return log.pipe(exports.suggest) // filter\n              .pipe(exports.defaultFormatter) // formatter\n              .pipe(exports.defaultBackend); // backend\n  }\n  return log.pipe(exports.suggest) // filter\n            .pipe(exports.defaultBackend); // formatter\n};\n\n","var microee = require('microee');\n\n// Implements a subset of Node's stream.Transform - in a cross-platform manner.\nfunction Transform() {}\n\nmicroee.mixin(Transform);\n\n// The write() signature is different from Node's\n// --> makes it much easier to work with objects in logs.\n// One of the lessons from v1 was that it's better to target\n// a good browser rather than the lowest common denominator\n// internally.\n// If you want to use external streams, pipe() to ./stringify.js first.\nTransform.prototype.write = function(name, level, args) {\n  this.emit('item', name, level, args);\n};\n\nTransform.prototype.end = function() {\n  this.emit('end');\n  this.removeAllListeners();\n};\n\nTransform.prototype.pipe = function(dest) {\n  var s = this;\n  // prevent double piping\n  s.emit('unpipe', dest);\n  // tell the dest that it's being piped to\n  dest.emit('pipe', s);\n\n  function onItem() {\n    dest.write.apply(dest, Array.prototype.slice.call(arguments));\n  }\n  function onEnd() { !dest._isStdio && dest.end(); }\n\n  s.on('item', onItem);\n  s.on('end', onEnd);\n\n  s.when('unpipe', function(from) {\n    var match = (from === dest) || typeof from == 'undefined';\n    if(match) {\n      s.removeListener('item', onItem);\n      s.removeListener('end', onEnd);\n      dest.emit('unpipe');\n    }\n    return match;\n  });\n\n  return dest;\n};\n\nTransform.prototype.unpipe = function(from) {\n  this.emit('unpipe', from);\n  return this;\n};\n\nTransform.prototype.format = function(dest) {\n  throw new Error([\n    'Warning: .format() is deprecated in Minilog v2! Use .pipe() instead. For example:',\n    'var Minilog = require(\\'minilog\\');',\n    'Minilog',\n    '  .pipe(Minilog.backends.console.formatClean)',\n    '  .pipe(Minilog.backends.console);'].join('\\n'));\n};\n\nTransform.mixin = function(dest) {\n  var o = Transform.prototype, k;\n  for (k in o) {\n    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);\n  }\n};\n\nmodule.exports = Transform;\n","var Transform = require('../common/transform.js'),\n    cache = [ ];\n\nvar logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  cache.push([ name, level, args ]);\n};\n\n// utility functions\nlogger.get = function() { return cache; };\nlogger.empty = function() { cache = []; };\n\nmodule.exports = logger;\n","var Transform = require('../common/transform.js');\n\nvar newlines = /\\n+$/,\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var i = args.length-1;\n  if (typeof console === 'undefined' || !console.log) {\n    return;\n  }\n  if(console.log.apply) {\n    return console.log.apply(console, [name, level].concat(args));\n  } else if(JSON && JSON.stringify) {\n    // console.log.apply is undefined in IE8 and IE9\n    // for IE8/9: make console.log at least a bit less awful\n    if(args[i] && typeof args[i] == 'string') {\n      args[i] = args[i].replace(newlines, '');\n    }\n    try {\n      for(i = 0; i < args.length; i++) {\n        args[i] = JSON.stringify(args[i]);\n      }\n    } catch(e) {}\n    console.log(args.join(' '));\n  }\n};\n\nlogger.formatters = ['color', 'minilog'];\nlogger.color = require('./formatters/color.js');\nlogger.minilog = require('./formatters/minilog.js');\n\nmodule.exports = logger;\n","var Transform = require('../../common/transform.js'),\n    color = require('./util.js');\n\nvar colors = { debug: ['cyan'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var fn = console.log;\n  if(console[level] && console[level].apply) {\n    fn = console[level];\n    fn.apply(console, [ '%c'+name+' %c'+level, color('gray'), color.apply(color, colors[level])].concat(args));\n  }\n};\n\n// NOP, because piping the formatted logs can only cause trouble.\nlogger.pipe = function() { };\n\nmodule.exports = logger;\n","var Transform = require('../../common/transform.js'),\n    color = require('./util.js'),\n    colors = { debug: ['gray'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },\n    logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  var fn = console.log;\n  if(level != 'debug' && console[level]) {\n    fn = console[level];\n  }\n\n  var subset = [], i = 0;\n  if(level != 'info') {\n    for(; i < args.length; i++) {\n      if(typeof args[i] != 'string') break;\n    }\n    fn.apply(console, [ '%c'+name +' '+ args.slice(0, i).join(' '), color.apply(color, colors[level]) ].concat(args.slice(i)));\n  } else {\n    fn.apply(console, [ '%c'+name, color.apply(color, colors[level]) ].concat(args));\n  }\n};\n\n// NOP, because piping the formatted logs can only cause trouble.\nlogger.pipe = function() { };\n\nmodule.exports = logger;\n","var hex = {\n  black: '#000',\n  red: '#c23621',\n  green: '#25bc26',\n  yellow: '#bbbb00',\n  blue:  '#492ee1',\n  magenta: '#d338d3',\n  cyan: '#33bbc8',\n  gray: '#808080',\n  purple: '#708'\n};\nfunction color(fg, isInverse) {\n  if(isInverse) {\n    return 'color: #fff; background: '+hex[fg]+';';\n  } else {\n    return 'color: '+hex[fg]+';';\n  }\n}\n\nmodule.exports = color;\n","var Minilog = require('../common/minilog.js');\n\nvar oldEnable = Minilog.enable,\n    oldDisable = Minilog.disable,\n    isChrome = (typeof navigator != 'undefined' && /chrome/i.test(navigator.userAgent)),\n    console = require('./console.js');\n\n// Use a more capable logging backend if on Chrome\nMinilog.defaultBackend = (isChrome ? console.minilog : console);\n\n// apply enable inputs from localStorage and from the URL\nif(typeof window != 'undefined') {\n  try {\n    Minilog.enable(JSON.parse(window.localStorage['minilogSettings']));\n  } catch(e) {}\n  if(window.location && window.location.search) {\n    var match = RegExp('[?&]minilog=([^&]*)').exec(window.location.search);\n    match && Minilog.enable(decodeURIComponent(match[1]));\n  }\n}\n\n// Make enable also add to localStorage\nMinilog.enable = function() {\n  oldEnable.call(Minilog, true);\n  try { window.localStorage['minilogSettings'] = JSON.stringify(true); } catch(e) {}\n  return this;\n};\n\nMinilog.disable = function() {\n  oldDisable.call(Minilog);\n  try { delete window.localStorage.minilogSettings; } catch(e) {}\n  return this;\n};\n\nexports = module.exports = Minilog;\n\nexports.backends = {\n  array: require('./array.js'),\n  browser: Minilog.defaultBackend,\n  localStorage: require('./localstorage.js'),\n  jQuery: require('./jquery_simple.js')\n};\n","var Transform = require('../common/transform.js');\n\nvar cid = new Date().valueOf().toString(36);\n\nfunction AjaxLogger(options) {\n  this.url = options.url || '';\n  this.cache = [];\n  this.timer = null;\n  this.interval = options.interval || 30*1000;\n  this.enabled = true;\n  this.jQuery = window.jQuery;\n  this.extras = {};\n}\n\nTransform.mixin(AjaxLogger);\n\nAjaxLogger.prototype.write = function(name, level, args) {\n  if(!this.timer) { this.init(); }\n  this.cache.push([name, level].concat(args));\n};\n\nAjaxLogger.prototype.init = function() {\n  if(!this.enabled || !this.jQuery) return;\n  var self = this;\n  this.timer = setTimeout(function() {\n    var i, logs = [], ajaxData, url = self.url;\n    if(self.cache.length == 0) return self.init();\n    // Test each log line and only log the ones that are valid (e.g. don't have circular references).\n    // Slight performance hit but benefit is we log all valid lines.\n    for(i = 0; i < self.cache.length; i++) {\n      try {\n        JSON.stringify(self.cache[i]);\n        logs.push(self.cache[i]);\n      } catch(e) { }\n    }\n    if(self.jQuery.isEmptyObject(self.extras)) {\n        ajaxData = JSON.stringify({ logs: logs });\n        url = self.url + '?client_id=' + cid;\n    } else {\n        ajaxData = JSON.stringify(self.jQuery.extend({logs: logs}, self.extras));\n    }\n\n    self.jQuery.ajax(url, {\n      type: 'POST',\n      cache: false,\n      processData: false,\n      data: ajaxData,\n      contentType: 'application/json',\n      timeout: 10000\n    }).success(function(data, status, jqxhr) {\n      if(data.interval) {\n        self.interval = Math.max(1000, data.interval);\n      }\n    }).error(function() {\n      self.interval = 30000;\n    }).always(function() {\n      self.init();\n    });\n    self.cache = [];\n  }, this.interval);\n};\n\nAjaxLogger.prototype.end = function() {};\n\n// wait until jQuery is defined. Useful if you don't control the load order.\nAjaxLogger.jQueryWait = function(onDone) {\n  if(typeof window !== 'undefined' && (window.jQuery || window.$)) {\n    return onDone(window.jQuery || window.$);\n  } else if (typeof window !== 'undefined') {\n    setTimeout(function() { AjaxLogger.jQueryWait(onDone); }, 200);\n  }\n};\n\nmodule.exports = AjaxLogger;\n","var Transform = require('../common/transform.js'),\n    cache = false;\n\nvar logger = new Transform();\n\nlogger.write = function(name, level, args) {\n  if(typeof window == 'undefined' || typeof JSON == 'undefined' || !JSON.stringify || !JSON.parse) return;\n  try {\n    if(!cache) { cache = (window.localStorage.minilog ? JSON.parse(window.localStorage.minilog) : []); }\n    cache.push([ new Date().toString(), name, level, args ]);\n    window.localStorage.minilog = JSON.stringify(cache);\n  } catch(e) {}\n};\n\nmodule.exports = logger;","const log = require('../util/log');\r\n\r\n/**\r\n * @typedef {object} DispatchCallMessage - a message to the dispatch system representing a service method call\r\n * @property {*} responseId - send a response message with this response ID. See {@link DispatchResponseMessage}\r\n * @property {string} service - the name of the service to be called\r\n * @property {string} method - the name of the method to be called\r\n * @property {Array|undefined} args - the arguments to be passed to the method\r\n */\r\n\r\n/**\r\n * @typedef {object} DispatchResponseMessage - a message to the dispatch system representing the results of a call\r\n * @property {*} responseId - a copy of the response ID from the call which generated this response\r\n * @property {*|undefined} error - if this is truthy, then it contains results from a failed call (such as an exception)\r\n * @property {*|undefined} result - if error is not truthy, then this contains the return value of the call (if any)\r\n */\r\n\r\n/**\r\n * @typedef {DispatchCallMessage|DispatchResponseMessage} DispatchMessage\r\n * Any message to the dispatch system.\r\n */\r\n\r\n/**\r\n * The SharedDispatch class is responsible for dispatch features shared by\r\n * {@link CentralDispatch} and {@link WorkerDispatch}.\r\n */\r\nclass SharedDispatch {\r\n    constructor () {\r\n        /**\r\n         * List of callback registrations for promises waiting for a response from a call to a service on another\r\n         * worker. A callback registration is an array of [resolve,reject] Promise functions.\r\n         * Calls to local services don't enter this list.\r\n         * @type {Array.<Function[]>}\r\n         */\r\n        this.callbacks = [];\r\n\r\n        /**\r\n         * The next response ID to be used.\r\n         * @type {int}\r\n         */\r\n        this.nextResponseId = 0;\r\n    }\r\n\r\n    /**\r\n     * Call a particular method on a particular service, regardless of whether that service is provided locally or on\r\n     * a worker. If the service is provided by a worker, the `args` will be copied using the Structured Clone\r\n     * algorithm, except for any items which are also in the `transfer` list. Ownership of those items will be\r\n     * transferred to the worker, and they should not be used after this call.\r\n     * @example\r\n     *      dispatcher.call('vm', 'setData', 'cat', 42);\r\n     *      // this finds the worker for the 'vm' service, then on that worker calls:\r\n     *      vm.setData('cat', 42);\r\n     * @param {string} service - the name of the service.\r\n     * @param {string} method - the name of the method.\r\n     * @param {*} [args] - the arguments to be copied to the method, if any.\r\n     * @returns {Promise} - a promise for the return value of the service method.\r\n     */\r\n    call (service, method, ...args) {\r\n        return this.transferCall(service, method, null, ...args);\r\n    }\r\n\r\n    /**\r\n     * Call a particular method on a particular service, regardless of whether that service is provided locally or on\r\n     * a worker. If the service is provided by a worker, the `args` will be copied using the Structured Clone\r\n     * algorithm, except for any items which are also in the `transfer` list. Ownership of those items will be\r\n     * transferred to the worker, and they should not be used after this call.\r\n     * @example\r\n     *      dispatcher.transferCall('vm', 'setData', [myArrayBuffer], 'cat', myArrayBuffer);\r\n     *      // this finds the worker for the 'vm' service, transfers `myArrayBuffer` to it, then on that worker calls:\r\n     *      vm.setData('cat', myArrayBuffer);\r\n     * @param {string} service - the name of the service.\r\n     * @param {string} method - the name of the method.\r\n     * @param {Array} [transfer] - objects to be transferred instead of copied. Must be present in `args` to be useful.\r\n     * @param {*} [args] - the arguments to be copied to the method, if any.\r\n     * @returns {Promise} - a promise for the return value of the service method.\r\n     */\r\n    transferCall (service, method, transfer, ...args) {\r\n        try {\r\n            const {provider, isRemote} = this._getServiceProvider(service);\r\n            if (provider) {\r\n                if (isRemote) {\r\n                    return this._remoteTransferCall(provider, service, method, transfer, ...args);\r\n                }\r\n\r\n                const result = provider[method].apply(provider, args);\r\n                return Promise.resolve(result);\r\n            }\r\n            return Promise.reject(new Error(`Service not found: ${service}`));\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a particular service lives on another worker.\r\n     * @param {string} service - the service to check.\r\n     * @returns {boolean} - true if the service is remote (calls must cross a Worker boundary), false otherwise.\r\n     * @private\r\n     */\r\n    _isRemoteService (service) {\r\n        return this._getServiceProvider(service).isRemote;\r\n    }\r\n\r\n    /**\r\n     * Like {@link call}, but force the call to be posted through a particular communication channel.\r\n     * @param {object} provider - send the call through this object's `postMessage` function.\r\n     * @param {string} service - the name of the service.\r\n     * @param {string} method - the name of the method.\r\n     * @param {*} [args] - the arguments to be copied to the method, if any.\r\n     * @returns {Promise} - a promise for the return value of the service method.\r\n     */\r\n    _remoteCall (provider, service, method, ...args) {\r\n        return this._remoteTransferCall(provider, service, method, null, ...args);\r\n    }\r\n\r\n    /**\r\n     * Like {@link transferCall}, but force the call to be posted through a particular communication channel.\r\n     * @param {object} provider - send the call through this object's `postMessage` function.\r\n     * @param {string} service - the name of the service.\r\n     * @param {string} method - the name of the method.\r\n     * @param {Array} [transfer] - objects to be transferred instead of copied. Must be present in `args` to be useful.\r\n     * @param {*} [args] - the arguments to be copied to the method, if any.\r\n     * @returns {Promise} - a promise for the return value of the service method.\r\n     */\r\n    _remoteTransferCall (provider, service, method, transfer, ...args) {\r\n        return new Promise((resolve, reject) => {\r\n            const responseId = this._storeCallbacks(resolve, reject);\r\n\r\n            /** @TODO: remove this hack! this is just here so we don't try to send `util` to a worker */\r\n            if ((args.length > 0) && (typeof args[args.length - 1].yield === 'function')) {\r\n                args.pop();\r\n            }\r\n\r\n            if (transfer) {\r\n                provider.postMessage({service, method, responseId, args}, transfer);\r\n            } else {\r\n                provider.postMessage({service, method, responseId, args});\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Store callback functions pending a response message.\r\n     * @param {Function} resolve - function to call if the service method returns.\r\n     * @param {Function} reject - function to call if the service method throws.\r\n     * @returns {*} - a unique response ID for this set of callbacks. See {@link _deliverResponse}.\r\n     * @protected\r\n     */\r\n    _storeCallbacks (resolve, reject) {\r\n        const responseId = this.nextResponseId++;\r\n        this.callbacks[responseId] = [resolve, reject];\r\n        return responseId;\r\n    }\r\n\r\n    /**\r\n     * Deliver call response from a worker. This should only be called as the result of a message from a worker.\r\n     * @param {int} responseId - the response ID of the callback set to call.\r\n     * @param {DispatchResponseMessage} message - the message containing the response value(s).\r\n     * @protected\r\n     */\r\n    _deliverResponse (responseId, message) {\r\n        try {\r\n            const [resolve, reject] = this.callbacks[responseId];\r\n            delete this.callbacks[responseId];\r\n            if (message.error) {\r\n                reject(message.error);\r\n            } else {\r\n                resolve(message.result);\r\n            }\r\n        } catch (e) {\r\n            log.error(`Dispatch callback failed: ${JSON.stringify(e)}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle a message event received from a connected worker.\r\n     * @param {Worker} worker - the worker which sent the message, or the global object if running in a worker.\r\n     * @param {MessageEvent} event - the message event to be handled.\r\n     * @protected\r\n     */\r\n    _onMessage (worker, event) {\r\n        /** @type {DispatchMessage} */\r\n        const message = event.data;\r\n        message.args = message.args || [];\r\n        let promise;\r\n        if (message.service) {\r\n            if (message.service === 'dispatch') {\r\n                promise = this._onDispatchMessage(worker, message);\r\n            } else {\r\n                promise = this.call(message.service, message.method, ...message.args);\r\n            }\r\n        } else if (typeof message.responseId === 'undefined') {\r\n            log.error(`Dispatch caught malformed message from a worker: ${JSON.stringify(event)}`);\r\n        } else {\r\n            this._deliverResponse(message.responseId, message);\r\n        }\r\n        if (promise) {\r\n            if (typeof message.responseId === 'undefined') {\r\n                log.error(`Dispatch message missing required response ID: ${JSON.stringify(event)}`);\r\n            } else {\r\n                promise.then(\r\n                    result => worker.postMessage({responseId: message.responseId, result}),\r\n                    error => worker.postMessage({responseId: message.responseId, error})\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch the service provider object for a particular service name.\r\n     * @abstract\r\n     * @param {string} service - the name of the service to look up\r\n     * @returns {{provider:(object|Worker), isRemote:boolean}} - the means to contact the service, if found\r\n     * @protected\r\n     */\r\n    _getServiceProvider (service) {\r\n        throw new Error(`Could not get provider for ${service}: _getServiceProvider not implemented`);\r\n    }\r\n\r\n    /**\r\n     * Handle a call message sent to the dispatch service itself\r\n     * @abstract\r\n     * @param {Worker} worker - the worker which sent the message.\r\n     * @param {DispatchCallMessage} message - the message to be handled.\r\n     * @returns {Promise|undefined} - a promise for the results of this operation, if appropriate\r\n     * @private\r\n     */\r\n    _onDispatchMessage (worker, message) {\r\n        throw new Error(`Unimplemented dispatch message handler cannot handle ${message.method} method`);\r\n    }\r\n}\r\n\r\nmodule.exports = SharedDispatch;\r\n","const SharedDispatch = require('./shared-dispatch');\r\n\r\nconst log = require('../util/log');\r\n\r\n/**\r\n * This class provides a Worker with the means to participate in the message dispatch system managed by CentralDispatch.\r\n * From any context in the messaging system, the dispatcher's \"call\" method can call any method on any \"service\"\r\n * provided in any participating context. The dispatch system will forward function arguments and return values across\r\n * worker boundaries as needed.\r\n * @see {CentralDispatch}\r\n */\r\nclass WorkerDispatch extends SharedDispatch {\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n         * This promise will be resolved when we have successfully connected to central dispatch.\r\n         * @type {Promise}\r\n         * @see {waitForConnection}\r\n         * @private\r\n         */\r\n        this._connectionPromise = new Promise(resolve => {\r\n            this._onConnect = resolve;\r\n        });\r\n\r\n        /**\r\n         * Map of service name to local service provider.\r\n         * If a service is not listed here, it is assumed to be provided by another context (another Worker or the main\r\n         * thread).\r\n         * @see {setService}\r\n         * @type {object}\r\n         */\r\n        this.services = {};\r\n\r\n        this._onMessage = this._onMessage.bind(this, self);\r\n        if (typeof self !== 'undefined') {\r\n            self.onmessage = this._onMessage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise} a promise which will resolve upon connection to central dispatch. If you need to make a call\r\n     * immediately on \"startup\" you can attach a 'then' to this promise.\r\n     * @example\r\n     *      dispatch.waitForConnection.then(() => {\r\n     *          dispatch.call('myService', 'hello');\r\n     *      })\r\n     */\r\n    get waitForConnection () {\r\n        return this._connectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Set a local object as the global provider of the specified service.\r\n     * WARNING: Any method on the provider can be called from any worker within the dispatch system.\r\n     * @param {string} service - a globally unique string identifying this service. Examples: 'vm', 'gui', 'extension9'.\r\n     * @param {object} provider - a local object which provides this service.\r\n     * @returns {Promise} - a promise which will resolve once the service is registered.\r\n     */\r\n    setService (service, provider) {\r\n        if (this.services.hasOwnProperty(service)) {\r\n            log.warn(`Worker dispatch replacing existing service provider for ${service}`);\r\n        }\r\n        this.services[service] = provider;\r\n        return this.waitForConnection.then(() => this._remoteCall(self, 'dispatch', 'setService', service));\r\n    }\r\n\r\n    /**\r\n     * Fetch the service provider object for a particular service name.\r\n     * @override\r\n     * @param {string} service - the name of the service to look up\r\n     * @returns {{provider:(object|Worker), isRemote:boolean}} - the means to contact the service, if found\r\n     * @protected\r\n     */\r\n    _getServiceProvider (service) {\r\n        // if we don't have a local service by this name, contact central dispatch by calling `postMessage` on self\r\n        const provider = this.services[service];\r\n        return {\r\n            provider: provider || self,\r\n            isRemote: !provider\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handle a call message sent to the dispatch service itself\r\n     * @override\r\n     * @param {Worker} worker - the worker which sent the message.\r\n     * @param {DispatchCallMessage} message - the message to be handled.\r\n     * @returns {Promise|undefined} - a promise for the results of this operation, if appropriate\r\n     * @protected\r\n     */\r\n    _onDispatchMessage (worker, message) {\r\n        let promise;\r\n        switch (message.method) {\r\n        case 'handshake':\r\n            promise = this._onConnect();\r\n            break;\r\n        case 'terminate':\r\n            // Don't close until next tick, after sending confirmation back\r\n            setTimeout(() => self.close(), 0);\r\n            promise = Promise.resolve();\r\n            break;\r\n        default:\r\n            log.error(`Worker dispatch received message for unknown method: ${message.method}`);\r\n        }\r\n        return promise;\r\n    }\r\n}\r\n\r\nmodule.exports = new WorkerDispatch();\r\n","/**\r\n * Block argument types\r\n * @enum {string}\r\n */\r\nconst ArgumentType = {\r\n    /**\r\n     * Numeric value with angle picker\r\n     */\r\n    ANGLE: 'angle',\r\n\r\n    /**\r\n     * Boolean value with hexagonal placeholder\r\n     */\r\n    BOOLEAN: 'Boolean',\r\n\r\n    /**\r\n     * Numeric value with color picker\r\n     */\r\n    COLOR: 'color',\r\n\r\n    /**\r\n     * Numeric value with text field\r\n     */\r\n    NUMBER: 'number',\r\n\r\n    /**\r\n     * String value with text field\r\n     */\r\n    STRING: 'string',\r\n\r\n    /**\r\n     * String value with matrix field\r\n     */\r\n    MATRIX: 'matrix',\r\n\r\n    /**\r\n     * MIDI note number with note picker (piano) field\r\n     */\r\n    NOTE: 'note',\r\n\r\n    /**\r\n     * Inline image on block (as part of the label)\r\n     */\r\n    IMAGE: 'image'\r\n};\r\n\r\nmodule.exports = ArgumentType;\r\n","/**\r\n * Types of block\r\n * @enum {string}\r\n */\r\nconst BlockType = {\r\n    /**\r\n     * Boolean reporter with hexagonal shape\r\n     */\r\n    BOOLEAN: 'Boolean',\r\n\r\n    /**\r\n     * A button (not an actual block) for some special action, like making a variable\r\n     */\r\n    BUTTON: 'button',\r\n\r\n    /**\r\n     * Command block\r\n     */\r\n    COMMAND: 'command',\r\n\r\n    /**\r\n     * Specialized command block which may or may not run a child branch\r\n     * The thread continues with the next block whether or not a child branch ran.\r\n     */\r\n    CONDITIONAL: 'conditional',\r\n\r\n    /**\r\n     * Specialized hat block with no implementation function\r\n     * This stack only runs if the corresponding event is emitted by other code.\r\n     */\r\n    EVENT: 'event',\r\n\r\n    /**\r\n     * Hat block which conditionally starts a block stack\r\n     */\r\n    HAT: 'hat',\r\n\r\n    /**\r\n     * Specialized command block which may or may not run a child branch\r\n     * If a child branch runs, the thread evaluates the loop block again.\r\n     */\r\n    LOOP: 'loop',\r\n\r\n    /**\r\n     * General reporter with numeric or string value\r\n     */\r\n    REPORTER: 'reporter'\r\n};\r\n\r\nmodule.exports = BlockType;\r\n","/**\r\n * Default types of Target supported by the VM\r\n * @enum {string}\r\n */\r\nconst TargetType = {\r\n    /**\r\n     * Rendered target which can move, change costumes, etc.\r\n     */\r\n    SPRITE: 'sprite',\r\n\r\n    /**\r\n     * Rendered target which cannot move but can change backdrops\r\n     */\r\n    STAGE: 'stage'\r\n};\r\n\r\nmodule.exports = TargetType;\r\n","const minilog = require('minilog');\r\nminilog.enable();\r\n\r\nmodule.exports = minilog('vm');\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AA1BA;AA0BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;;;;AA/FA;AACA;AAiGA;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AA0CA;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AA6CA;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;;;;;;;;;;;AChBA;AACA;AAAA;AAEA;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}